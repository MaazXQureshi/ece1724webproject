// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organizer {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  info     String?
  email    String?
  phone    String?
  imageUrl String?
  events   Event[]
  orgTags  OrgTag[]

  adminId  Int     @unique  // Ensures only one admin per organizer
  admin    User    @relation(fields: [adminId], references: [id], onDelete: Cascade)  
}

model User {
  id            Int        @id @default(autoincrement())
  email         String     @unique
  username      String     @unique
  admin         Boolean
  passwordHash  String
  organizer     Organizer?  // A user can only be an admin of one organizer
  registrations Register[]
}

model Register {
  userId  Int
  eventId Int

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@id([userId, eventId])
}

model Event {
  id            Int        @id @default(autoincrement())
  clubId        Int
  name          String
  time          DateTime
  location      String
  info          String?
  hours         Int?
  imageUrl      String?
  organizer     Organizer  @relation(fields: [clubId], references: [id])
  registrations Register[]
}

model Tag {
  id      Int      @id @default(autoincrement())
  name    String
  orgTags OrgTag[]
}

model OrgTag {
  orgId Int
  tagId Int

  organizer Organizer @relation(fields: [orgId], references: [id])
  tag       Tag       @relation(fields: [tagId], references: [id])

  @@id([orgId, tagId])
}
